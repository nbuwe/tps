/************************Config.Imake:begin***************************/
/* Just to make sure; SGI does not default this to /bin/sh */
SHELL=/bin/sh

/* Read the top-level README to see how to do a build. */

/* Define Basic OS Architecture Parameters */
/*
Sadly, cpp does not appear to be consistent across all platforms.
So, I am reduced to using some crude methods to get multi-
platform parameterization to work.
*/

/*
A platform currently consists of the following components:
arch: kind of hardware architecture
	e.g. {sun3, sun4, decmips, alpha, sgi-1, pa-risc}
os: particular class of operating system.
	e.g. {solaris1, solaris2, ultrix, osf1, irix, hpux}
cc: particular c compiler
	e.g. {cc, gcc}
c++: particular c++ compiler
	e.g. {g++,c++}
ada: particular ada compiler.
	e.g. {sunada1.1, verdix6.03}
*/

#undef !TARGETARCH!
#undef !TARGETOS!
TARGETARCH=!TARGETARCH!
TARGETOS=!TARGETOS!
/* Allow use of these names during Imake construction */
#define !TARGETARCH! $(TARGETARCH)
#define !TARGETOS! $(TARGETOS)

TARGETCC=!TARGETCC!
TARGETCPLUS=!TARGETCPLUS!
C=$(TARGETCC)
CC=$(TARGETCC)
CPLUS=$(TARGETCPLUS)

/* Gnu does not currently imply gnat */
#define USEGNU !USEGNU!

/*
The target name is, for now, assumed to be the target architecture
plus the os plus the C++ compiler.
*/
TARGET=$(TARGETARCH).$(TARGETOS).$(TARGETCPLUS)
/* Define shorter names for the target */
TARGETSHORT=$(TARGETARCH)
TARGETSHORT2=$(TARGETARCH).$(TARGETOS)

/*****************************************/
/* Define basic paths and names for this system */

/*
The name of this system is tps: tiny postscript.
*/

/* System name */
SYSPREFIX=tps

/* If the version or patchlevel changes,
   then you need to delete src/version.C
   so it will be re-created with the new version string.
*/
SYSMAJOR=2
SYSMINOR=1
SYSPATCHLEVEL=c

SYSVERSION=$(SYSMAJOR).$(SYSMINOR)

SYSNAME=$(SYSPREFIX)$(SYSVERSION)

SYSFULLNAME=$(SYSNAME)$(SYSPATCHLEVEL)

SYSHOME=!CWD!

/************************************************/
/*	BEGIN SYSTEM DEPENDENCIES		*/
/************************************************/
/*
This section contains the macros that are
most likely to be system dependent.
*/

/************************************************/
/* define versions of supporting systems */

/* N.A. */

/**************************************************/
/******** General Distribution Definitions ********/
/*
Note Review these values carefully: they are probably not correct
for your site as they stand.
*/

/* Define the various objects needed for this to operate;
   They will be overridden as needed in the site specific
   definitions
*/

/* TOOL PATHS: */

/*
The simplest way to handle tool path problems is to
define the PATH environment variable so that the correct
versions of the following tools are located by simple name.
Required tools: imake, make, ar(if your system uses it), ranlib|touch, mkdirs
optional tools: makedepend
*/
/* => Modify PATH as Needed */

MAKE=make
AR=ar
ARFLAGS=cru

RANLIB=ranlib
RANLIBT=touch /* take the easy way out */

#if defined hpux || defined solaris2
RANLIB= touch
#endif

#if defined irix
RANLIB=ar ts
#endif

/* choices: MKDIRS=mkdirs vs MKDIRS=mkdir -p */
MKDIRS=mkdir -p

/* Following are usually found with the X11 executables */
IMAKE=imake
MAKEDEPEND=makedepend
/* For solaris2, they should always be here */
#ifdef solaris2
IMAKE=/opt/X/11.5/bin/imake
MAKEDEPEND=/opt/X/11.5/bin/makedepend
#endif /*solaris2*/

/* Define the tar command by which tar can be made to read a file
   to obtain the list of files to insert into the tar file.
   see ./Imakefile: srctar.
*/

#define tarcmd(tarfile,inventory) tar -cf tarfile -I inventory

#ifdef ultrix
#undef tarcmd
#define tarcmd(tarfile,inventory) tar -cfR tarfile inventory
#endif /*ultrix*/

#ifdef irix
#undef tarcmd
#define tarcmd(tarfile,inventory) tar -cf tarfile - < inventory
#endif /*irix*/

#ifdef hpux
#undef tarcmd
#define tarcmd(tarfile,inventory) tar -cf tarfile -T inventory
#endif /*hpux*/

/**********OVERRIDES**********/
/* If you modify any of the above, it may be best to
   to put those overrides here
*/

/* Default is to use the values above */

/************************************************/
/*	END SYSTEM DEPENDENCIES			*/
/************************************************/
/* Modifications to the following should be rare */

/* Misc. references */
SYSTARGET=$(SYSHOME)/$(TARGET)
SYSBIN=$(SYSTARGET)/bin
SYSLIBDIR=$(SYSTARGET)/lib
SYSINCLUDES=$(SYSTARGET)/include

SYSTARGETSHORT=$(SYSHOME)/$(TARGETSHORT)
SYSTARGETSHORT2=$(SYSHOME)/$(TARGETSHORT2)

/* Misc Definitions */
/**************************************************/

/* Avoid having Imake interpret .../ *.... as a a comment */
STAR=*

/**************************************************/

/* Define the names of the tar files */

SRCTARNAME=$(SYSFULLNAME).tar

THISDIRREL=$(UPFIX)/$(SUFFIX)
THISDIRABS=$(SYSHOME)/$(SUFFIX)

/**************************************************/

SRCTARLIST=$(THISDIRABS)/INVENTORY

TARPREFIX=$(SUFFIX)

/**************************************************/
/* Define some common functionality for all directories */

/**************************************************/
/* get around the problem of all coming first */
/* This must be the first dependency */
All: all


#ifdef HAS_SUBDIRS

#ifndef MAKE_PROPAGATE
propagate:
	@-for i in $(SUBDIRS); do ( cd $$i; echo '<entering' $$i; $(CMD) ; echo '>leaving' $$i ;cd .. ); done
#endif

#ifndef MAKE_IMAKEALL
imakeall:
	make propagate CMD='$(IMAKE); $(MAKE) imakeall'
#endif

#ifndef MAKE_TAGVERSION
tagversion:
	make propagate CMD='$(MAKE) tagversion'
#endif

#ifndef MAKE_ALL
all:
	make propagate CMD='$(MAKE) all'
#endif
	
#ifndef MAKE_DEPEND
depend:
	make propagate CMD='$(MAKE) depend'
#endif

#ifndef MAKE_INSTALL
install:
	make propagate CMD='$(MAKE) install'
#endif

#ifndef MAKE_CLEAN
clean:
	make propagate CMD='$(MAKE) clean'
#endif

#ifndef MAKE_REALCLEAN
Clean:
	make propagate CMD='$(MAKE) Clean'
#endif

#ifndef MAKE_RCS
#ifdef HAS_SOURCE
RCS:
	-mkdir RCS
	make propagate CMD='$(MAKE) RCS'
#else
RCS:
	make propagate CMD='$(MAKE) RCS'
#endif
#endif

#else /*!HAS_SUBDIRS*/

#ifndef MAKE_PROPAGATE
propagate:
#endif

#ifndef MAKE_IMAKEALL
imakeall:
#endif

#ifndef MAKE_TAGVERSION
tagversion:
#endif

#ifndef MAKE_ALL
all:
#endif
	
#ifndef MAKE_DEPEND
depend:
#endif

#ifndef MAKE_INSTALL
install:
#endif

#ifndef MAKE_CLEAN
clean:
#endif

#ifndef MAKE_REALCLEAN
Clean:
#endif

#ifndef MAKE_RCS
#ifdef HAS_SOURCE
RCS:
	-mkdir RCS
#else
RCS:
#endif
#endif

#endif /*HAS_SUBDIRS*/

/**************************************************/
/* Define a procedure to conditionally drop into the $(TARGET) directory */

#ifndef DOIT
#define DOIT(targetcmd) @if [ -d $(TARGET) ] ; then cd $(TARGET) ; echo 'cd' $(TARGET) ; fi ; $(MAKE) targetcmd
#endif

/****************************************************/
/* Define a procedure to do equivalent of install -d */

#ifndef MAKEDIR
#define MAKEDIR(dir) -if [ ! -d dir ] ; then $(MKDIRS) dir ; fi
#endif

/****************************************************/
/* Define procedures to remove a file or directory */

#ifndef REMOVE
#define REMOVE(dir) rm -fr dir
#endif

/****************************************************/
/* Define a procedure to do install a set of files; test for existence */

#ifndef DOINSTALL
#define DOINSTALL(files,where) for i in files ; do if [ -f $$i ] ; then cp $$i where ; fi ; done
#endif

/************************Config.Imake:end***************************/
