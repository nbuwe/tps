# Makefile generated by imake - do not edit!
# $XConsortium: imake.c,v 1.65 91/07/25 17:50:17 rws Exp $
#
# The cpp used on this machine replaces all newlines and multiple tabs and
# spaces in a macro expansion with a single space.  Imake tries to compensate
# for this, but is not always successful.
#

SUFFIX=src
UPFIX=..

SHELL=/bin/sh

TARGETARCH=sun4
TARGETOS=solaris1

TARGETCC=gcc
TARGETCPLUS=g++
C=$(TARGETCC)
CC=$(TARGETCC)
CPLUS=$(TARGETCPLUS)

TARGET=$(TARGETARCH).$(TARGETOS).$(TARGETCPLUS)

TARGETSHORT=$(TARGETARCH)
TARGETSHORT2=$(TARGETARCH).$(TARGETOS)

SYSPREFIX=tps

SYSMAJOR=2
SYSMINOR=1
SYSPATCHLEVEL=c

SYSVERSION=$(SYSMAJOR).$(SYSMINOR)

SYSNAME=$(SYSPREFIX)$(SYSVERSION)

SYSFULLNAME=$(SYSNAME)$(SYSPATCHLEVEL)

SYSHOME=/tmp_mnt/cs/research/arcadia/csci7818/dennis/tps2.1

MAKE=make
AR=ar
ARFLAGS=cru

RANLIB=ranlib
RANLIBT=touch

MKDIRS=mkdir -p

IMAKE=imake
MAKEDEPEND=makedepend

SYSTARGET=$(SYSHOME)/$(TARGET)
SYSBIN=$(SYSTARGET)/bin
SYSLIBDIR=$(SYSTARGET)/lib
SYSINCLUDES=$(SYSTARGET)/include

SYSTARGETSHORT=$(SYSHOME)/$(TARGETSHORT)
SYSTARGETSHORT2=$(SYSHOME)/$(TARGETSHORT2)

STAR=*

SRCTARNAME=$(SYSFULLNAME).tar

THISDIRREL=$(UPFIX)/$(SUFFIX)
THISDIRABS=$(SYSHOME)/$(SUFFIX)

SRCTARLIST=$(THISDIRABS)/INVENTORY

TARPREFIX=$(SUFFIX)

All: all

propagate:

imakeall:

tagversion:

RCS:
	-mkdir RCS

NETLIBS=

AIXFLAGS=

HPFLAGS=

MACHDEPFLAGS=$(AIXFLAGS) $(HPFLAGS)

PICFLAG=-fPIC

STATIC=-static

STATIC=

MALREPFLAG=

VERBOSEFLAG=
DEBMALFLAG=
MALLOCLIB=

DEBUGFLAG=-g

OFLAG=-O

OPTFLAG=$(OFLAG) $(DEBUGFLAG) $(PROFFLAG)

CONFIGFLAGS=-D$(TARGETOS)=1

DFLAGS= $(MACHDEPFLAGS) \
	$(MALREPFLAG) \
	$(VERBOSEFLAG) \
	$(DEBMALFLAG) \
	$(CONFIGFLAGS)

IFLAGS=-I.

CPPFLAGS=$(DFLAGS) $(IFLAGS)
CFLAGS=$(PICFLAG) $(OPTFLAG) $(CPPFLAGS)
CCFLAGS=$(CFLAGS)

MISCLIBS=-lm $(MALLOCLIB) $(NETLIBS)

TMPFILE=./.tempfile

VERSION=$(SYSVERSION)$(SYSPATCHLEVEL)

ALLSRC=\
	Sysdep.H \
	array.H \
	chartab.H \
	container.H \
	debug.H \
	dict.H \
	exec.H \
	export.H \
	init.H \
	interp.H \
	isolate.H \
	lex.H \
	mem.H \
	name.H \
	operator.H \
	primitives.H \
	str.H \
	stream.H \
	textdefs.H \
	tps.H \
	util.H \
	value.H \
	array.C \
	chartab.C \
	dict.C \
	exec.C \
	export.C \
	gc.C \
	init.C \
	interp.C \
	lex.C \
	name.C \
	primitives.C \
	str.C \
	stream.C \
	textdefs.C \
	tsh.C \
	util.C \
	$(MALREPFILE)

PLATFORMPREFIX=tps_platform

PLATFORMTMPL= $(PLATFORMPREFIX).H.tmpl $(PLATFORMPREFIX).C.tmpl
PLATFORMSRC= $(PLATFORMPREFIX).H $(PLATFORMPREFIX).C

EVERYTHING= Imakefile Imake.tmpl .dbxinit $(PLATFORMTMPL) $(ALLSRC)

INSTALLABLEHDRS= \
	Sysdep.H \
	array.H \
	container.H \
	debug.H \
	dict.H \
	exec.H \
	init.H \
	interp.H \
	isolate.H \
	lex.H \
	name.H \
	operator.H \
	primitives.H \
	str.H \
	tps.H \
	value.H \
	stream.H\
	$(PLATFORMPREFIX).H

HDRS= \
	$(INSTALLABLEHDRS) \
	chartab.H \
	export.H \
	mem.H \
	textdefs.H \
	util.H

CORESRCS= \
	array.C \
	chartab.C \
	dict.C \
	export.C \
	exec.C \
	gc.C \
	init.C \
	interp.C \
	lex.C \
	name.C \
	primitives.C \
	str.C \
	util.C \
	stream.C \
	textdefs.C \
	$(PLATFORMPREFIX).C

COREOBJS=$(CORESRCS:.C=.o)

# LIBOJBS is everything other than the core object files
LIBSRCS= debug.C mem.C
LIBOBJS=$(LIBSRCS:.C=.o)

DRIVER=tsh
DRIVERSRCS= $(DRIVER).C
DRIVEROBJS=$(DRIVER).o

SRCS=$(CORESRCS) $(CORECSRCS) $(LIBSRCS) $(DRIVERSRCS)

INTERP=$(SYSPREFIX).o

SYSLIBNAME=lib$(SYSPREFIX)

SYSLIB=$(SYSLIBNAME).a

SYSCORE=$(SYSPREFIX).o

SYSLIBSHARED=$(SYSLIBNAME).so
SHAREDLDFLAGS=-assert pure-text

ABSHAREDLIB=$(SYSLIBDIR)/$(SYSLIBSHARED)

SYSSRCS=postinit.x

BUILDSRCS=$(HDRS) $(CHDRS) $(SRCS) $(PLATFORMTMPL)
BUILDMISC=.dbxinit Makefile
BUILDMAKES=$(SYSPREFIX) platformfiles

PRODUCTS= $(SYSLIB) $(SYSLIBSHARED) $(DRIVER)

.SUFFIXES: .C

.C.o:
	$(CPLUS) -c $(CCFLAGS) $*.C

all: $(TARGET)
	@if [ -d $(TARGET) ] ; then cd $(TARGET) ; echo 'cd' $(TARGET) ; fi ; $(MAKE) all.target

install: installincl installlib installbin

installcode: installlib installbin

installincl:
	@if [ -d $(TARGET) ] ; then cd $(TARGET) ; echo 'cd' $(TARGET) ; fi ; $(MAKE) installincl.target

installlib:
	@if [ -d $(TARGET) ] ; then cd $(TARGET) ; echo 'cd' $(TARGET) ; fi ; $(MAKE) installlib.target

installbin:
	@if [ -d $(TARGET) ] ; then cd $(TARGET) ; echo 'cd' $(TARGET) ; fi ; $(MAKE) installbin.target

clean: $(TARGET)
	@if [ -d $(TARGET) ] ; then cd $(TARGET) ; echo 'cd' $(TARGET) ; fi ; $(MAKE) clean.target

all.target: $(PRODUCTS)

all.sharedlib: $(SYSLIBSHARED)

$(SYSTARGET):
	@echo "Installing directories"
	-if [ ! -d $(SYSTARGET) ] ; then $(MKDIRS) $(SYSTARGET) ; fi
	ln -s $(SYSTARGET) $(SYSTARGETSHORT)
	ln -s $(SYSTARGET) $(SYSTARGETSHORT2)
	-if [ ! -d $(SYSLIBDIR) ] ; then $(MKDIRS) $(SYSLIBDIR) ; fi
	-if [ ! -d $(SYSBIN) ] ; then $(MKDIRS) $(SYSBIN) ; fi

installincl.target: $(SYSTARGET)
	@echo "Installing includes"
	rm -fr $(SYSINCLUDES)
	-if [ ! -d $(SYSINCLUDES) ] ; then $(MKDIRS) $(SYSINCLUDES) ; fi
	-if [ ! -d $(SYSINCLUDES)/$(SYSPREFIX) ] ; then $(MKDIRS) $(SYSINCLUDES)/$(SYSPREFIX) ; fi
	for i in $(INSTALLABLEHDRS) ; do if [ -f $$i ] ; then cp $$i $(SYSINCLUDES) ; fi ; done
	(cd $(SYSINCLUDES)/$(SYSPREFIX); ln -s ../$(STAR).[hH] .)

installstaticlib.target: $(SYSTARGET)
	@echo "Installing static library"
	rm -fr $(SYSLIBDIR)/$(SYSLIB)
	for i in $(SYSLIB) ; do if [ -f $$i ] ; then cp $$i $(SYSLIBDIR) ; fi ; done
	$(RANLIBT) $(SYSLIBDIR)/$(SYSLIB)

installsharedlib.target: $(SYSTARGET)
	@echo "Installing shared library"
	rm -fr $(SYSLIBDIR)/$(SYSLIBSHARED)
	for i in $(SYSLIBSHARED) ; do if [ -f $$i ] ; then cp $$i $(SYSLIBDIR) ; fi ; done

installlib.target: installstaticlib.target installsharedlib.target

installbin.target: $(SYSTARGET)
	@echo "Installing shell"
	rm -fr $(SYSBIN)/$(DRIVER)
	for i in $(DRIVER) ; do if [ -f $$i ] ; then cp $$i $(SYSBIN) ; fi ; done

clean.target:
	for i in a.out core $(STAR)..c $(STAR).o $(PRODUCTS) ; do \
		rm -fr $$i; done

Clean:
	rm -fr $(TARGET)
	rm -fr $(SYSPREFIX)

$(TARGET):
	@echo "creating"  $(TARGET) "directory"
	-if [ ! -d $(TARGET) ] ; then $(MKDIRS) $(TARGET) ; fi
	rm -f $(TARGETSHORT); ln -s $(TARGET) $(TARGETSHORT)
	rm -f $(TARGETSHORT2); ln -s $(TARGET) $(TARGETSHORT2)
	(cd $(TARGET); \
		rm -f $(STAR) ; \
		for i in $(BUILDSRCS) ; do ln -s ../$$i . ; done ; \
		for i in $(BUILDMISC) ; do ln -s ../$$i . ; done ; \
		for i in $(BUILDMAKES) ; do make $$i ; done \
	)

$(SYSPREFIX):
	-if [ ! -d $(SYSPREFIX) ] ; then $(MKDIRS) $(SYSPREFIX) ; fi
	(cd $(SYSPREFIX) ; \
		rm -f $(STAR) ; \
		for i in $(HDRS) ; do ln -s ../$$i . ; done ; \
	)

$(SYSLIB): $(COREOBJS) $(LIBOBJS)
	@echo "building $(SYSLIB)"
	$(AR) $(ARFLAGS) $(SYSLIB) $(COREOBJS) $(LIBOBJS)
	$(RANLIB) $(SYSLIB)

$(SYSLIBSHARED): $(COREOBJS) $(LIBOBJS)
	       ld $(SHAREDLDFLAGS) -o $(SYSLIBSHARED) $(COREOBJS) $(LIBOBJS)

$(SYSCORE): $(COREOBJS)
	ld -r -o $(SYSCORE) $(COREOBJS)

$(DRIVER): $(DRIVEROBJS) $(SYSLIB)
	$(CPLUS) $(STATIC) $(CFLAGS) -o $(DRIVER) $(DRIVEROBJS) debug.o $(SYSLIB) $(MISCLIBS)

platformfiles: $(PLATFORMTMPL)
	@echo making $(PLATFORMSRC)
	@rm -f $(PLATFORMSRC)
	@rm -f $(TMPFILE)
	@echo "/?VERSION?/s@?VERSION?@$(VERSION)@g" >> $(TMPFILE)
	@echo "/?TARGETARCH?/s@?TARGETARCH?@$(TARGETARCH)@g" >> $(TMPFILE)
	@echo "/?TARGETOS?/s@?TARGETOS?@$(TARGETOS)@g" >> $(TMPFILE)
	@echo "/?TARGETCC?/s@?TARGETCC?@$(TARGETCC)@g" >> $(TMPFILE)
	@echo "/?TARGETCPLUS?/s@?TARGETCPLUS?@$(TARGETCPLUS)@g" >> $(TMPFILE)
	@sed -f $(TMPFILE) < $(PLATFORMPREFIX).H.tmpl > $(PLATFORMPREFIX).H
	@sed -f $(TMPFILE) < $(PLATFORMPREFIX).C.tmpl > $(PLATFORMPREFIX).C
	@rm -f $(TMPFILE)

TCLINC=/homes/arcadia/src/tcl7.3/$(TARGETARCH)/include
TCLLIB=/homes/arcadia/src/tcl7.3/$(TARGETARCH)/lib/libtcl.a

tclsh: tclAppInit.c
	$(CC) $(STATIC) -I$(TCLINC) -o tclsh $(CFLAGS) tclAppInit.c $(TCLLIB) -lm

depend:

Depend: $(SYSPREFIX) platformfiles $(BUILDSRCS)
	$(MAKEDEPEND) -- $(CPPFLAGS) $(CFLAGS) -- $(BUILDSRCS)

# DO NOT DELETE THIS LINE -- make depend depends on it.

array.o: container.H
dict.o: container.H
str.o: container.H
tps.o: Sysdep.H tps_platform.H
tps.o: value.H array.H container.H dict.H name.H operator.H str.H stream.H
tps.o: lex.H interp.H
tps.o: init.H exec.H isolate.H
stream.o: container.H
array.o: tps.H
array.o: Sysdep.H tps_platform.H
array.o: value.H array.H container.H dict.H name.H operator.H str.H stream.H
array.o: lex.H interp.H
array.o: init.H exec.H isolate.H mem.H
chartab.o: Sysdep.H chartab.H
dict.o: tps.H
dict.o: Sysdep.H tps_platform.H
dict.o: value.H array.H container.H dict.H name.H operator.H str.H stream.H
dict.o: lex.H interp.H
dict.o: init.H exec.H isolate.H mem.H
export.o: tps.H
export.o: Sysdep.H tps_platform.H
export.o: value.H array.H container.H dict.H name.H operator.H str.H stream.H
export.o: lex.H interp.H
export.o: init.H exec.H isolate.H export.H chartab.H
export.o: util.H
exec.o: tps.H
exec.o: Sysdep.H tps_platform.H
exec.o: value.H array.H container.H dict.H name.H operator.H str.H stream.H
exec.o: lex.H interp.H
exec.o: init.H exec.H isolate.H util.H
gc.o: tps.H
gc.o: Sysdep.H tps_platform.H
gc.o: value.H array.H container.H dict.H name.H operator.H str.H stream.H
gc.o: lex.H interp.H
gc.o: init.H exec.H isolate.H
init.o: tps.H
init.o: Sysdep.H tps_platform.H value.H array.H
init.o: container.H dict.H name.H operator.H str.H stream.H
init.o: lex.H interp.H
init.o: init.H exec.H isolate.H primitives.H util.H
init.o: chartab.H textdefs.H
interp.o: tps.H
interp.o: Sysdep.H tps_platform.H
interp.o: value.H array.H container.H dict.H name.H operator.H str.H stream.H
interp.o: lex.H interp.H
interp.o: init.H exec.H isolate.H primitives.H util.H
interp.o: mem.H export.H
lex.o: tps.H
lex.o: Sysdep.H tps_platform.H
lex.o: value.H array.H container.H dict.H name.H operator.H str.H stream.H
lex.o: lex.H interp.H
lex.o: init.H exec.H isolate.H mem.H chartab.H
name.o: tps.H
name.o: Sysdep.H tps_platform.H
name.o: value.H array.H container.H dict.H name.H operator.H str.H stream.H
name.o: lex.H interp.H
name.o: init.H exec.H isolate.H mem.H
primitives.o: tps.H
primitives.o: Sysdep.H tps_platform.H value.H array.H
primitives.o: container.H dict.H name.H operator.H str.H stream.H
primitives.o: lex.H interp.H
primitives.o: init.H exec.H
primitives.o: isolate.H primitives.H util.H mem.H export.H
str.o: tps.H
str.o: Sysdep.H tps_platform.H
str.o: value.H array.H container.H dict.H name.H operator.H str.H stream.H
str.o: lex.H interp.H
str.o: init.H exec.H isolate.H mem.H
util.o: tps.H
util.o: Sysdep.H tps_platform.H
util.o: value.H array.H container.H dict.H name.H operator.H str.H stream.H
util.o: lex.H interp.H
util.o: init.H exec.H isolate.H util.H chartab.H
util.o: debug.H
stream.o: tps.H
stream.o: Sysdep.H tps_platform.H value.H array.H
stream.o: container.H dict.H name.H operator.H str.H stream.H
stream.o: lex.H interp.H
stream.o: init.H exec.H isolate.H mem.H
textdefs.o: tps.H
textdefs.o: Sysdep.H
textdefs.o: tps_platform.H value.H array.H container.H dict.H name.H
textdefs.o: operator.H str.H stream.H
textdefs.o: lex.H interp.H
textdefs.o: init.H exec.H
textdefs.o: isolate.H textdefs.H
debug.o: tps.H
debug.o: Sysdep.H tps_platform.H
debug.o: value.H array.H container.H dict.H name.H operator.H str.H stream.H
debug.o: lex.H interp.H
debug.o: init.H exec.H isolate.H util.H mem.H debug.H
mem.o: tps.H
mem.o: Sysdep.H tps_platform.H value.H array.H
mem.o: container.H dict.H name.H operator.H str.H stream.H
mem.o: lex.H interp.H
mem.o: init.H exec.H isolate.H mem.H
tsh.o: tps.H
tsh.o: Sysdep.H tps_platform.H value.H array.H container.H dict.H name.H
tsh.o: operator.H str.H stream.H lex.H interp.H
tsh.o: init.H exec.H
tsh.o: isolate.H

